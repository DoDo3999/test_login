import { h, mount, postJSON } from "../lib.js";
import { go } from "../main.js";

export function Register() {
  const err = h("div", { class: "err", id: "err" });

  const username = h("input", { name: "username", required: true, placeholder: "‡πÄ‡∏ä‡πà‡∏ô dodo1234", autocomplete: "username" });

  const pass = h("input", { name: "password", type: "password", required: true, placeholder: "8‚Äì20 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£/‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç", autocomplete: "new-password" });
  const eye = h("button", { type: "button", class: "eye", title: "‡πÅ‡∏™‡∏î‡∏á/‡∏ã‡πà‡∏≠‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô" }, "üëÅ");
  eye.addEventListener("click", () => { pass.type = pass.type === "password" ? "text" : "password"; });

  const passGroup = h("div", { class: "input-group" }, pass, eye);
  const pwHints = h("ul", { class: "pw-hints" },
    h("li", {}, "‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏ç‡πà"),
    h("li", {}, "‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πá‡∏Å"),
    h("li", {}, "‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç"),
    h("li", {}, "‡∏°‡∏µ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ô 8‚Äì20 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£"),
  );

  
  const form = h("form", { class: "row", id: "regForm" },
    field("‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (Username)*", username, 12),
    field("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (Password)*", h("div", {}, passGroup, pwHints), 12),

    field("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó*", sel(["--- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ---", "‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤", "‡∏ô‡∏¥‡∏ï‡∏¥‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•"], { name: "member_type", required: true }), 12),
    field("‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•/‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó*", h("input", { name: "company_name", required: true }), 12),

    field("‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà*", h("input", { name: "house_no", required: true }), 4),
    field("‡∏´‡∏°‡∏π‡πà", h("input", { name: "moo" }), 4),
    field("‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô/‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£", h("input", { name: "building" }), 4),

    field("‡∏ã‡∏≠‡∏¢", h("input", { name: "alley" }), 6),
    field("‡∏ñ‡∏ô‡∏ô*", h("input", { name: "road", required: true }), 6),

    field("‡∏ï‡∏≥‡∏ö‡∏•/‡πÅ‡∏Ç‡∏ß‡∏á*", h("input", { name: "subdistrict", required: true }), 6),
    field("‡∏≠‡∏≥‡πÄ‡∏†‡∏≠/‡πÄ‡∏Ç‡∏ï*", h("input", { name: "district", required: true }), 6),

    field("‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î*", h("input", { name: "province", required: true }), 6),
    field("‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå*", h("input", { name: "postal_code", required: true }), 6),

    field("‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠*", sel(["--- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ---", "‡∏Ñ‡∏∏‡∏ì", "‡∏ô‡∏≤‡∏¢", "‡∏ô‡∏≤‡∏á", "‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß"], { name: "contact_title", required: true }), 4),
    field("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠*", h("input", { name: "contact_fname", required: true }), 4),
    field("‡∏™‡∏Å‡∏∏‡∏•‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠*", h("input", { name: "contact_lname", required: true }), 4),

    field("‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå*", h("input", { name: "phone", required: true, placeholder: "‡πÄ‡∏ä‡πà‡∏ô 0812345678", inputmode: "numeric" }), 6),
    field("‡∏≠‡∏µ‡πÄ‡∏°‡∏•*", h("input", { name: "email", type: "email", required: true, placeholder: "name@example.com" }), 6),

    field("‡πÇ‡∏Ñ‡πâ‡∏î‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ (REF)", h("input", { name: "ref_code" }), 12),

    h("div", { class: "col-12" }, h("button", { type: "submit", style: "width:100%" }, "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å")),
  );

 
  const getData = () => {
    const raw = Object.fromEntries(new FormData(form).entries());
    for (const k in raw) raw[k] = String(raw[k]).trim();
    return raw;
  };

  form.addEventListener("submit", async (e) => {
    e.preventDefault();
    err.style.display = "none";
    form.querySelectorAll(".invalid").forEach(el => el.classList.remove("invalid"));

    const data = getData();
    const messages = validateForm(form, data);
    if (messages.length) { showErrors(messages); return; }

    const { status, data: res } = await postJSON("/api/register", data);

    if (status === 400 && Array.isArray(res.errors)) {
      const msg = res.errors.map(e => `‚Ä¢ ${e.path || e.param}: ${e.msg || "‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"}`);
      res.errors.forEach(e => form.querySelector(`[name="${e.path || e.param}"]`)?.classList.add("invalid"));
      return showErrors(msg);
    }

    if (status === 409) { form.username.classList.add("invalid"); return showErrors(["‚Ä¢ username ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß"]); }
    if (status === 0 || status >= 400) {
      const msg = res.detail ? `${res.error || 'Server error'}: ${res.detail}` : (res.error || '‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö/‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
      return showErrors([msg]);
    }

    go("/profile");
  });

  function showErrors(list) {
    err.style.display = "block";
    err.innerHTML = list.join("<br>");
  }

  
  mount(
    h("div", { class: "container" },
      h("div", { class: "card" },
        h("div", { class: "h1" }, "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å"),
        h("div", { class: "badge-line" }, h("span", { class: "dot" }), "‡∏ó‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ü‡∏£‡∏µ 6 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"),
        err,
        form
      )
    )
  );
}

function field(labelEl, inputEl, col = 6) {
  return h("div", { class: `col-${col}` }, h("label", {}, labelEl), inputEl);
}
function sel(options, attrs) {
  const [first, ...rest] = options;
  return h("select", attrs,
    h("option", { value: "" }, first ?? "‚Äî ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‚Äî"),
    ...rest.map(o => h("option", {}, o))
  );
}


function validateForm(form, d) {
  const errs = [];
  if (!/^[A-Za-z][A-Za-z0-9_]{3,19}$/.test(d.username)) {
    errs.push("‚Ä¢ username: ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© 4‚Äì20 ‡∏ï‡∏±‡∏ß ‡πÅ‡∏•‡∏∞‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£");
    form.username.classList.add("invalid");
  }
  if (!/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[A-Za-z\d]{8,20}$/.test(d.password)) {
    errs.push("‚Ä¢ password: ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏ç‡πà ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πá‡∏Å ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡πÅ‡∏•‡∏∞‡∏¢‡∏≤‡∏ß 8‚Äì20 ‡∏ï‡∏±‡∏ß");
    form.querySelector('[name="password"]').classList.add("invalid");
  }
  const required = [
    "member_type", "company_name", "house_no", "road", "subdistrict", "district",
    "province", "postal_code", "contact_title", "contact_fname", "contact_lname", "phone", "email"
  ];
  required.forEach(n => {
    if (!d[n]) { errs.push(`‚Ä¢ ${n}: ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å`); form.querySelector(`[name="${n}"]`)?.classList.add("invalid"); }
  });
  if (d.email && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(d.email)) {
    errs.push("‚Ä¢ email: ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"); form.email.classList.add("invalid");
  }
  return errs;
}
